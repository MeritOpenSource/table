const path = require("path");

const config = {
  parserOptions: {
    project: path.resolve(__dirname, "tsconfig.json"),
  },
  env: {
    es6: true,
    "jest/globals": true,
    node: true,
  },
  globals: {
    window: true,
  },
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/all",
    "plugin:prettier/recommended",
    "plugin:react/recommended",
    "prettier",
  ],
  ignorePatterns: ["package.json"],
  settings: {
    react: {
      version: "detect",
    },
  },
  overrides: [
    {
      files: ["**/webpack.*.js", "**/postcss.config.js"],
      env: {
        node: true,
      },
      rules: {
        "@typescript-eslint/no-require-imports": "off",
        "@typescript-eslint/no-var-requires": "off",
      },
    },
    {
      files: ["**/*.test.ts", "**/*.test.tsx", "**/test-utils/**"],
      rules: {
        "@typescript-eslint/no-non-null-assertion": "off",
      },
    },
  ],
  parser: "@typescript-eslint/parser",
  plugins: [
    "babel",
    "cypress",
    "jest",
    "prettier",
    "react",
    "react-hooks",
    "sort-imports-es6-autofix",
    "sort-keys-fix",
  ],
  root: true,
  rules: {
    "arrow-body-style": ["error", "as-needed"],
    "no-async-promise-executor": "error",
    "no-await-in-loop": "error",
    "prettier/prettier": "error",
    "no-duplicate-imports": "error",
    "no-misleading-character-class": "error",
    "no-prototype-builtins": "error",
    "no-template-curly-in-string": "error",
    "require-atomic-updates": "error",
    "accessor-pairs": "error",
    "consistent-return": "error",
    curly: "error",
    "default-case": "error",
    "dot-notation": "error",
    eqeqeq: "error",
    "guard-for-in": "error",
    "no-alert": "error",
    "no-caller": "error",
    "no-div-regex": "error",
    "no-else-return": "error",
    "no-eq-null": "error",
    "no-eval": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-label": "error",
    "no-floating-decimal": "error",
    "no-implicit-coercion": "error",
    "no-implicit-globals": "error",
    "no-implied-eval": "error",
    "no-invalid-this": "error",
    "no-iterator": "error",
    "no-labels": "error",
    "no-lone-blocks": "error",
    "no-loop-func": "error",
    "no-multi-str": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "no-octal-escape": "error",
    "no-param-reassign": ["error", { props: true }],
    "no-proto": "error",
    "no-return-assign": "error",
    "no-return-await": "error",
    "no-script-url": "error",
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-shadow": "error",
    "no-throw-literal": "error",
    "no-unmodified-loop-condition": "error",
    "no-unused-expressions": "error",
    "no-use-before-define": "off", // Handled by @typescript-eslint/no-use-before-define
    "no-useless-call": "error",
    "no-useless-catch": "error",
    "no-useless-concat": "error",
    "no-useless-return": "error",
    "no-void": "error",
    "no-with": "error",
    "prefer-promise-reject-errors": "error",
    radix: "error",
    "require-unicode-regexp": "error",
    "vars-on-top": "error",
    "wrap-iife": "error",
    yoda: "error",
    "no-label-var": "error",
    "no-restricted-globals": [
      "error",
      {
        name: "location",
        message: "Use 'location' from react-router, or window.location instead",
      },
    ],
    "no-shadow-restricted-names": "error",
    "no-undef-init": "error",
    "no-unused-vars": ["error", { argsIgnorePattern: "impossible", varsIgnorePattern: "React" }],
    "consistent-this": "error",
    "func-name-matching": "error",
    "func-names": "error",
    "linebreak-style": ["error", "unix"],
    "no-array-constructor": "error",
    "no-bitwise": "error",
    "no-continue": "error",
    "no-lonely-if": "error",
    "no-multi-assign": "error",
    "no-negated-condition": "error",
    "no-nested-ternary": "error",
    "no-new-object": "error",
    "no-plusplus": "error",
    "no-tabs": "error",
    "no-underscore-dangle": ["error", { allow: ["__typename"] }],
    "no-unneeded-ternary": "error",
    "one-var": ["error", "never"],
    "operator-assignment": "error",
    "prefer-object-spread": "error",
    "spaced-comment": "error",
    "arrow-parens": ["off", "as-needed"],
    "no-this-before-super": "error",
    "no-useless-computed-key": "error",
    "no-useless-constructor": "off", // Handled by @typescript-eslint/no-useless-constructor
    "no-useless-rename": "error",
    "no-var": "error",
    "object-shorthand": "error",
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "prefer-numeric-literals": "error",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "error",
    "symbol-description": "error",
    "padding-line-between-statements": [
      "error",
      { blankLine: "always", prev: "*", next: "return" }, // replaces newline-before-return
      { blankLine: "never", prev: "import", next: "import" },
    ],

    // React
    "react/button-has-type": "error",
    "react/destructuring-assignment": "error",
    "react/display-name": "off",
    "react/jsx-sort-props": "error",
    "react/prop-types": "off",
    "react/no-access-state-in-setstate": "error",
    "react/no-array-index-key": "error",
    "react/no-deprecated": "error",
    "react/no-did-mount-set-state": "error",
    "react/no-did-update-set-state": "error",
    "react/no-multi-comp": "error",
    "react/no-redundant-should-component-update": "error",
    "react/no-typos": "error",
    "react/no-this-in-sfc": "error",
    "react/no-unused-state": "error",
    "react/no-will-update-set-state": "error",
    "react/prefer-es6-class": "error",
    "react/require-optimization": "error",
    "react/self-closing-comp": "error",
    "react/style-prop-object": "error",
    "react/void-dom-elements-no-children": "error",
    "react/jsx-boolean-value": "error",
    "react/jsx-curly-brace-presence": ["error", "never"],
    "react/jsx-fragments": "error",
    "react/jsx-pascal-case": "error",

    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "error",

    "sort-imports-es6-autofix/sort-imports-es6": "error",
    "sort-keys-fix/sort-keys-fix": ["error", "asc", { natural: true }],

    // Typescript
    "@typescript-eslint/ban-ts-ignore": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-member-accessibility": "off",
    "@typescript-eslint/no-floating-promises": "off",
    "@typescript-eslint/no-inferrable-types": "off",
    "@typescript-eslint/no-magic-numbers": "off",
    "@typescript-eslint/no-useless-constructor": "error",
    "@typescript-eslint/no-this-alias": [
      "error",
      {
        allowDestructuring: true, // Allow `const { props, state } = this`; false by default
      },
    ],
    "@typescript-eslint/no-type-alias": "off",
    "@typescript-eslint/no-unnecessary-condition": ["error"],
    "@typescript-eslint/no-untyped-public-signature": "off",
    "@typescript-eslint/promise-function-async": "off",
    "@typescript-eslint/quotes": ["error", "double", { avoidEscape: true }],
    "@typescript-eslint/strict-boolean-expressions": "off",
    "@typescript-eslint/typedef": "off",
    "@typescript-eslint/unbound-method": "off",
    "@typescript-eslint/prefer-nullish-coalescing": "off", // After discussion with team, we're not happy with the safety of this rule, so it's off
    "@typescript-eslint/prefer-readonly-parameter-types": ["error", { ignoreInferredTypes: true }],

    // To turn on with some discussion and effort
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-throw-literal": "off",
    "@typescript-eslint/restrict-template-expressions": "off",
    "@typescript-eslint/consistent-type-imports": "off",
    "@typescript-eslint/naming-convention": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",

    // React-native and Expo fixes
    "@typescript-eslint/no-require-imports": "off", // required for asset loading
    "@typescript-eslint/no-unsafe-assignment": "off", // loaded assets are always any
    "no-unused-vars": "off", // use the typescript version of this rule
    "@typescript-eslint/no-unused-vars": ["error"],
  },
};

module.exports = config;
